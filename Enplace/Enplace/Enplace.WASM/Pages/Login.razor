@page "/login"
@using Enplace.Service.Services.Managers
@attribute [AllowAnonymous]



<EditForm class="m-auto" Model="_model">
    <section class="flex-col flex-around account-login">
        <h1>Login</h1>
        <span class="subtitle">email</span>
        <InputText typeof="email" placeholder="homecook@enplace.com" class="blade-control" @bind-Value="_model.Email" DisplayName="Email" />
        <span class="subtitle">password</span>
        <InputText class="blade-control" placeholder="********" type="password" @bind-Value="_model.Credentials" DisplayName="Password" />
        <div class="flex-row flex-between gap-s">
            <button class="btn btn-primary" @onclick="() => AuthorizeUser()">
                Log In
            </button>
            <button class="btn btn-secondary" @onclick="() => RegisterUser()">
                Create New Account
            </button>
        </div>
    </section>
</EditForm>


@code {
    [Inject]
    public required AuthService Auth { get; set; }
    [Inject]
    public required AuthenticationStateProvider AuthProvider { get; set; }
    [Inject]
    public required NavigationManager NavigationManager { get; set; }
    [Inject]
    public required ILocalStorageService Storage { get; set; }
    [Inject]
    public required AsyncEventManager<Notification> Notifications { get; set; }

    [Inject]
    public required AsyncEventManager<bool> LoadingEventManager { get; set; }

    private AuthRequest _model = new();

    public async void AuthorizeUser()
    {
        LoadingEventManager.TriggerEvent(true);
        var response = await Auth.AuthenticateUser(_model);
        if (response is not null)
        {
            var dto = await Auth.AuthenticateAPI(response.Token ?? string.Empty);
            EnplaceContext.User = dto;
            HandleToken(response.Token ?? string.Empty);
        }
        LoadingEventManager.TriggerEvent(false);
    }

    public async void RegisterUser()
    {
        LoadingEventManager.TriggerEvent(true);
        try
        {
            var response = await Auth.RegisterUser(_model);
            if (response is not null)
            {
                EnplaceContext.User = await Auth.RegisterAPI(response.Token ?? string.Empty);
                HandleToken(response.Token ?? string.Empty);
            }
        }
        catch (Exception ex)
        {
            Notifications.TriggerEvent(new() { Message = ex.Message, Type = NotificationType.Error });
        }
        LoadingEventManager.TriggerEvent(false);
    }

    private void HandleToken(string token)
    {
        if (Auth.IsTokenValid(token))
        {
            EnplaceContext.Token = token;
            Storage.SetItemAsStringAsync("skid.enplace", token);


            StateHasChanged();
            AuthProvider.GetAuthenticationStateAsync();
            LoadingEventManager.TriggerEvent(false);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            // Notify user
        }
        LoadingEventManager.TriggerEvent(false);
    }
}
