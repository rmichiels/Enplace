@page "/"
@page "/dashboard"
@attribute [Authorize]

@using Enplace.Service.Services.Managers

<div id="user-dashboard" class="user-dashboard">
    <section class="section-menu">
        <aside class="menu-splash">
            <p>
                what will you be cooking today {username}?
            </p>
        </aside>
        <header>
            <span class="subtitle">Your menus</span>
        </header>
        <Enplace.Library.Menus.MenuCarrousel />
    </section>
    <section class="flex-col flex-start">
        <span class="subtitle">On the menu...</span>
        <section class="section-recipe">
            @foreach (RecipeDTO recipe in _selectedMenu.MenuRecipes)
            {
                <RecipeCard Item="recipe" State="ComponentState.Details" />
            }
        </section>
    </section>
    <section class="section-inspiration">
        <span class="subtitle">Pick up where you left off!</span>

       @*  <section class="section-recipe">
            <RecipeCard Item="_newRecipe" State="ComponentState.Create" />
            @foreach (RecipeDTO recipe in _recipes)
            {
                <RecipeCard Item="recipe" State="ComponentState.Details" />
            }
        </section> *@
        <CachedCarrousel TItem="RecipeDTO" TComponent="RecipeCard" Class="section-recipe" />
    </section>
</div>

@code {
    [Inject]
    public ApiService<RecipeDTO> Service { get; set; }
    [Inject]
    public MenuAPI MenuAPI { get; set; }

    private List<RecipeDTO> _recipes = [];
    private MenuDTO _selectedMenu = new();
    private RecipeDTO _newRecipe = new() { Category = new() { Id = 1, Name = "Standard" } };

    protected override async Task OnInitializedAsync()
    {
        var recipeResult = await Service.GetAll();
        _recipes = recipeResult.ToList();

        EventManager.OnSubmit += RefreshDashboard;
        EventManager.MenuSelection.OnEventTriggered += MenuSelected;
    }

    private async Task RefreshDashboard()
    {
        Console.WriteLine("Triggered Dashboard Refresh...");
        var recipeResult = await Service.GetAll();
        _recipes = recipeResult.ToList();
        _selectedMenu.MenuRecipes = await MenuAPI.GetMenuRecipes(_selectedMenu.Id);
        StateHasChanged();
        Console.WriteLine("...Dashboard Refreshed.");
    }

    private async Task MenuSelected(MenuDTO menu)
    {
        _selectedMenu = menu;
        _selectedMenu.MenuRecipes = await MenuAPI.GetMenuRecipes(menu.Id);
        EnplaceContext.Menu = _selectedMenu;
        StateHasChanged();
    }

    private async Task AddRecipeToMenu(RecipeDTO recipe)
    {
        if (_selectedMenu.MenuRecipes.Contains(recipe))
        {
            _selectedMenu.MenuRecipes.Remove(recipe);
        }
        else
        {
            _selectedMenu.MenuRecipes.Add(recipe);
        }
        var response = await MenuAPI.Update(_selectedMenu);
        StateHasChanged();
    }
}
