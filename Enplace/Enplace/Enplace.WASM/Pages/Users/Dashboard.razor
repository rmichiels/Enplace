@page "/"
@page "/dashboard"
@attribute [Authorize]

@using Blazored.Modal
@using Blazored.Modal.Services
@using Enplace.Library.Menus
@using Enplace.Library.Models
@using Enplace.Service.Contracts
@using Enplace.Service.Services.Managers

<div id="user-dashboard" class="user-dashboard">
    <section class="section-menu">
        <aside class="menu-splash m-hidden glass" hidden>
            <p>
                what will you be cooking today @EnplaceContext.User.Name ?
            </p>
        </aside>
        <div class="d-flex flex-col glass f-1" style="padding-bottom:0 !important;">
            <header class="flex-row flex-between gap-m">
                <span class="subtitle">Your menus</span>
                <button type="button" class="btn-icon m-revealed" @onclick="ShowMenuEditor">
                    <Add />
                </button>
            </header>
            <CachedCarrousel TItem="MenuDTO" TComponent="MenuCard"
                             Class="menu-carrousel m-hidden-scrollbar f-1 glass-padding"
                             @bind-SelectedItem:get="_selectedMenu" @bind-SelectedItem:set="MenuSelected"
                             SelectFirst=true ShowCreationTile=true FilterOnUser=true />
        </div>
    </section>
    <section class="section-inspiration">
        <header class="flex-row flex-between gap-m">
            <span class="subtitle">On the menu...</span>
        </header>
        <CachedCarrousel @ref="MenuRecipes" TItem="RecipeDTO" TComponent="RecipeCard" Class="section-recipe"
                         StorageKeyExtension="menu" ShowCreationTile=false FilterOnUser=true
                         QueryOverride=true Query=@MenuAPI.GetMenuRecipes />
    </section>
    <section class="section-inspiration">
        <header class="flex-row flex-between gap-m">
            <span class="subtitle">Pick up where you left off!</span>
            <button type="button" class="btn-icon m-revealed" @onclick="ShowRecipeCreator">
                <Add />
            </button>
        </header>
        <CachedCarrousel TItem="RecipeDTO" TComponent="RecipeCard" Class="section-recipe" FilterOnUser=true />
    </section>
</div>

@code {
    [CascadingParameter] public IModalService ModalService { get; set; } = default!;
    [Inject]
    public ILocalStorageService StorageService { get; set; }
    [Inject]
    public required ApiService<RecipeDTO> Service { get; set; }
    [Inject]
    public required MenuAPI MenuAPI { get; set; }
    [Inject]
    public required AsyncEventManager<MenuDTO> MenuEventManager { get; set; }

    CachedCarrousel<RecipeDTO, RecipeCard> MenuRecipes;

    private MenuDTO? _selectedMenu = null;
    private List<RecipeDTO> _menuRecipes
    {
        get => _selectedMenu?.MenuRecipes ?? [];
        set
        {
            if (_selectedMenu is not null)
            {
                _selectedMenu.MenuRecipes = value;
            }
        }
    }

    private RecipeDTO _newRecipe = new() { Category = new() { Id = 1, Name = "Standard" } };

    protected override void OnInitialized()
    {
        EventManager.TopicSelected.TriggerEvent(Topic.Recipes);
        //EventManager.OnSubmit += RefreshDashboard;
        //MenuEventManager.OnEventTriggered += MenuSelected;
    }

    private async Task RefreshDashboard()
    {
        Console.WriteLine("Triggered Dashboard Refresh...");
        if (_selectedMenu is not null)
        {
            _selectedMenu.MenuRecipes = await MenuAPI.GetMenuRecipes(_selectedMenu);
        }
        StateHasChanged();
        Console.WriteLine("...Dashboard Refreshed.");
    }

    private async Task MenuSelected(MenuDTO? menu)
    {
        if (menu is not null)
        {
            Task.Run(() => MenuRecipes.ForceCarrouselRefresh(menu));
            Task.Run(() => SetGroceries(_selectedMenu));
            Console.WriteLine($"User Dashboard - Menu Selected: {menu?.Name}");
            _selectedMenu = menu;
            EnplaceContext.Menu = menu;
        }
    }

    // Task to Fire & Forget - Aids loading of the groceries page,
    // Even if we don't care about the results on this page.
    private async Task SetGroceries(MenuDTO menu)
    {
        var groceries = await MenuAPI.GetGroceriesFor(menu.Id);
        await StorageService.SetCacheFor(groceries, menu.Id, "groceries");
    }

    public void ShowRecipeCreator()
    {
        var modalOpts = new ModalOptions() { Size = ModalSize.Large };
        var modalParams = new ModalParameters()
            .Add(nameof(RecipeEditor.State), ComponentState.Create)
            .Add(nameof(RecipeEditor.Action), "create");
        ModalService.Show<RecipeEditor>
    ("Add New Recipe", modalParams, modalOpts);
    }

    protected Task ShowMenuEditor()
    {
        Console.WriteLine("Show Menu Editor Modal...");
        var opt = new ModalOptions() { Size = ModalSize.Medium };
        var param = new ModalParameters().Add(nameof(MenuEditor.State), ComponentState.Create);
        ModalService.Show<MenuEditor>
            ("Create new menu", param, opt);
        return Task.CompletedTask;
    }

    private async Task AddRecipeToMenu(RecipeDTO recipe)
    {
        if (_selectedMenu is not null)
        {
            if (_selectedMenu.MenuRecipes.Contains(recipe))
            {
                _selectedMenu.MenuRecipes.Remove(recipe);
            }
            else
            {
                _selectedMenu.MenuRecipes.Add(recipe);
            }
            var response = await MenuAPI.Update(_selectedMenu);
            StateHasChanged();
        }
    }
}
