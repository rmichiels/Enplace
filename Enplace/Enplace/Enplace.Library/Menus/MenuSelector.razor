@using Blazored.Modal
@using Enplace.Service.Services.Managers

<article class="menu-selector flex-col flex-start ">
    <div class="flex-row flex-start w-100">
        <TGLSelect @bind-Field:get="Menu.Id" @bind-Field:set="SelectMenu" Options="_menuOptions.ToList<ILabeled>()" Class="blade-control m-auto min-350" />
    </div>
    @if (Recipe is not null)
    {
        <div class="flex-row flex-between align-items-center w-100">
            <div class="flex-row flex-between align-items-center">
                <Silhouette Class="blade-label m-row-3 dark-mode" />
                <Ladder @bind-Step="MenuScale" LowerBounds="1" />
            </div>
            <button class="btn-icon blade-button" @onclick="() => AddRecipeToMenu()">
                Add
                <Enplace.Library.Icons.Add />
            </button>
        </div>
    }
</article>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    private async Task Close() => await BlazoredModal.CloseAsync();

    [Inject]
    public MenuAPI API { get; set; }
    [Inject]
    public required AsyncEventManager<MenuDTO> MenuEvents { get; set; }

    [Parameter]
    public RecipeDTO Recipe { get; set; }

    [Parameter]
    public MenuDTO Menu { get; set; } = new();

    private decimal MenuScale;
    private List<MenuDTO> _menuOptions = [];

    protected override async Task OnInitializedAsync()
    {
        Menu = EnplaceContext.Menu ?? new();
        _menuOptions = await API.GetAll();
        if (Recipe is not null)
        {
            MenuScale = Recipe.ApproximateServingSize ?? 1;
        }
    }

    public void SelectMenu(int i)
    {
        Console.WriteLine(i);
        Menu = _menuOptions.First(m => m.Id == i);
        MenuEvents.TriggerEvent(Menu);
        StateHasChanged();
    }

    private async Task AddRecipeToMenu()
    {
        Recipe.Scale = MenuScale / (Recipe.ApproximateServingSize ?? 1);
        Menu.MenuRecipes = await API.GetMenuRecipes(Menu);
        Menu.MenuRecipes.Add(Recipe);
        await API.Update(Menu);
        EventManager.TriggerOnSubmit();
        MenuEvents.TriggerEvent(Menu);
        await BlazoredModal.CloseAsync();
    }
}
