@using Blazored.Modal
@using Enplace.Service.Services.Managers

<article class="menu-selector flex-col flex-start ">
    <div class="flex-row flex-start w-100">
        <TGLSelect Field="Menu.Id" FieldChanged="(i) => SelectMenu(i)" Options="_menuOptions.ToList<ILabeled>()" Class="blade-control m-auto" />
    </div>
    <div class="flex-row flex-between align-items-center w-100">
        <Silhouette Class="blade-label m-row-3 dark-mode" />
        <Ladder @bind-Step="MenuScale" LowerBounds="1" />
        <button class="btn-icon blade-button" @onclick="() => AddRecipeToMenu()">
            <Enplace.Library.Icons.Add />
        </button>
    </div>
</article>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    private async Task Close() => await BlazoredModal.CloseAsync();

    [Inject]
    public MenuAPI API { get; set; }
    [Inject]
    public AsyncEventManager<MenuDTO> MenuEvents { get; set; }

    [Parameter]
    public RecipeDTO Recipe { get; set; }

    [Parameter]
    public MenuDTO Menu { get; set; } = new();

    private decimal MenuScale;
    private List<MenuDTO> _menuOptions = [];

    protected override async Task OnInitializedAsync()
    {
        Menu = EnplaceContext.Menu ?? new();
        _menuOptions = await API.GetAll();
        MenuScale = Recipe.ApproximateServingSize ?? 1;
    }

    private async Task SelectMenu(int i)
    {
        Menu = _menuOptions.First(m => m.Id == i);
        StateHasChanged();
    }

    private async Task AddRecipeToMenu()
    {
        Recipe.Scale = MenuScale / (Recipe.ApproximateServingSize ?? 1);
        Menu.MenuRecipes = await API.GetMenuRecipes(Menu);
        Menu.MenuRecipes.Add(Recipe);
        await API.Update(Menu);
        EventManager.TriggerOnSubmit();
        MenuEvents.TriggerEvent(Menu);
        await BlazoredModal.CloseAsync();
    }
}
