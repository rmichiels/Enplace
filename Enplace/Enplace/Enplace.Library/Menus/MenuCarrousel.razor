@using Blazored.Modal
@using Blazored.Modal.Services
@using Enplace.Service.Services.Managers
@using System.Globalization

<section class="menu-carrousel">
    <MenuCard State="ComponentState.Create" OnMenuSelected="(m) => ShowMenuEditor()" />
    @foreach (MenuDTO menu in Menus)
    {
            <MenuCard @bind-Menu="@Menus[Menus.IndexOf(menu)]" OnMenuSelected="(m) => SelectMenu(m)" State="@ComponentState.Details" Class="@(menu.Id == _selectedMenu?.Id ? "ActiveMenu" : string.Empty)" />
    }
</section>

@code {
    [Inject]
    public IModalService Modal { get; set; }

    [Inject]
    public MenuAPI API { get; set; }

    public List<MenuDTO> Menus { get; set; } = [];
    private int _currentWeek;
    private static MenuDTO _selectedMenu = null;

    protected override async Task OnInitializedAsync()
    {
        var user = EnplaceContext.User;
        Menus = await API.GetAll();

        _currentWeek = CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(DateTime.Now,
           CultureInfo.CurrentCulture.DateTimeFormat.CalendarWeekRule,
           CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek
       );

        // Check if current collection of menus
        // Contains a menu for the current week
        if (!Menus.Any(m => m.Name == $"{DateTime.Now.Year}W{_currentWeek}U{user.Id}"))
        {
            var result = await API.Add(new()
                {
                    Name = $"{DateTime.Now.Year}W{_currentWeek}U{user.Id}",
                    UserId = user.Id,
                    Week = _currentWeek
                });
            // refresh menus after creating current weekly menu
            // ensures menu id is synced w/ db
            Menus = await API.GetAll();
        }
        if (_selectedMenu is null)
        {
            _selectedMenu = Menus.First();
            Console.WriteLine($"Menu Carrousel - Selected Menu: {_selectedMenu.Name}");
        }
        EventManager.MenuSelection.TriggerEvent(_selectedMenu);
        EventManager.MenuCreated.OnEventTriggered += ForceRefresh;
    }

    protected async Task SelectMenu(MenuDTO menu)
    {
        _selectedMenu = menu;
        EventManager.MenuSelection.TriggerEvent(menu);
        StateHasChanged();
    }

    protected async Task ForceRefresh(MenuDTO menu)
    {
        Menus = await API.GetAll();
        StateHasChanged();
    }

    protected async Task ShowMenuEditor()
    {
        Console.WriteLine("Show Menu Editor Modal...");
        var opt = new ModalOptions() { Size = ModalSize.Medium };
        var param = new ModalParameters().Add(nameof(MenuEditor.State), ComponentState.Create);
        Modal.Show<MenuEditor>("Create new menu", param, opt);
    }
}