@using Blazored.Modal
@using Blazored.Modal.Services
@using System.Security.Claims
@using Enplace.Service.Services.Managers
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="ingredient-selector" @onclick="@(() => {ShowOptions = false; StateHasChanged();})">
    <div class="input-blade" @onclick="@(() => {ShowOptions = false; StateHasChanged();})">
        <InputText class="blade-control m-row-main m-row-full-width" @bind-Value="_searchIngredient" @oninput="(c) => QueryIngredients((string)c.Value)" @onchange="(c) => QueryIngredients((string)c.Value)" placeholder="Search..." />
        <TGLSelect Class="blade-control" @bind-Field="_measurementId" Options="EnplaceContext.Measurements.ToList<ILabeled>()" Placeholder="Measurements..." />
        <InputNumber class="blade-control" style="grid-row:controls;" @bind-Value="_quantity" />
        <button type="button" class="btn-icon blade-control " @onclick="async () => await Callback()">
            <Enplace.Library.Icons.Add />
        </button>
        <InputText class="blade-comment" @bind-Value="_ingredient.Comment" placeholder="Peeled & Quartered,..." />
    </div>
    @if (ShowOptions)
    {
        <div @ref="optionsRef" class="ingredient-options">
            @if (_options.Count == 0)
            {
                <p>
                    no ingredients found
                </p>
            }
            else
            {
                foreach (var opt in _options)
                {
                    <button @onclick="() => SelectIngredient(opt)">
                        <h5>@opt.Name</h5> <span>@opt.Category.Name</span>
                    </button>
                }
            }
            <p>
                Not what you're looking for? <a class="interact-subtle" @onclick="(e) => EventManager.IngredientRequested.TriggerEvent()" onclick:preventDefault>Request a new ingredient!</a>
            </p>
        </div>
    }
</div>


@code {
    [Inject]
    public IResource<IngredientDTO> Resource { get; set; }
    [Inject]
    public NavigationManager Navigation { get; set; }

    private IngredientDTO _ingredient = new();

    [Parameter]
    public EventCallback<IngredientDTO> OnSave { get; set; }

    private string _searchIngredient { get; set; } = string.Empty;
    private int _measurementId { get; set; } = 0;
    private decimal _quantity { get; set; } = 0;
    private List<IngredientDTO> _options { get; set; } = [];

    public bool ShowOptions { get; set; } = false;
    ElementReference optionsRef = new();

    protected override async void OnAfterRender(bool firstRender)
    {
        //if (ShowOptions) { await optionsRef.FocusAsync(); }
    }

    private async Task QueryIngredients(string str)
    {
        if (str.Length > 2)
        {
            _searchIngredient = str;
            _options = await Resource.Query(str);
        }
        ShowOptions = _searchIngredient.Length > 2 && _searchIngredient != _ingredient.Name;
        StateHasChanged();
    }

    private async Task SelectIngredient(IngredientDTO ingredient)
    {
        _ingredient = ingredient;
        _searchIngredient = ingredient.Name;
        StateHasChanged();
    }

    private async Task Callback()
    {
        _ingredient.MeasurementId = _measurementId;
        _ingredient.Measurement = EnplaceContext.Measurements.FirstOrDefault(m => m.Id == _measurementId);
        _ingredient.Quantity = _quantity;
        await OnSave.InvokeAsync(_ingredient);

        _ingredient = new();
        _measurementId = 0;
        _quantity = 0;
        _searchIngredient = string.Empty;
        StateHasChanged();
    }
}
