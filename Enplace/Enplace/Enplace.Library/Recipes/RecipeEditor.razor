@page "/recipes/{Id:int}/{Action}"
@page "/recipes/{Action}"
@using Blazored.Modal
@using Blazored.Modal.Services
@using Enplace.Library.Ingredients
@using Enplace.Service.Services.Converters
@using Enplace.Service.Services.Managers
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

<EditForm class="flex-col flex-start gap-m flex-grow-1 mobile-invert-col" EditContext="@Context" OnSubmit="PostRecipe">
    <TabList @bind-OptionSet="ActiveSection" Delimiter="OptionSetDelimiter.CapitalLetters" />
    <div class="card recipe-editor @State">
        @switch (State)
        {
            case ComponentState.Loading:
                // TODO : Add Skeleton version of the component
                <p>... loading ...</p>
                break;
            case ComponentState.Create:
            case ComponentState.Edit:
                bool isValid = IsRecipeValid();
                @if (ActiveSection == EditorSection.General)
                {
                    <div class="card-header">
                        <ImageDropper @bind-Image="@_recipeHeaderImg" />
                    </div>
                }
                <div class="card-body flex-col flex-1">
                    @switch (ActiveSection)
                    {
                        case EditorSection.General:
                            <div class="input-blade">
                                <span class="subtitle blade-label" style="width:min-content;">Title</span>
                                <InputText class="blade-control" @bind-Value="Recipe.Name" placeholder="Recipe Name..." />
                                <span class="subtitle blade-label">Category</span>
                                <TGLSelect Class="blade-control" Field="@_recipeCategoryId" FieldChanged="(i) => AssignCategory(i)" Options="EnplaceContext.RecipeCategories.ToList<ILabeled>()" />
                                <Clock Class="blade-label m-row-3" />
                                <InputNumber class="blade-control" @bind-Value="Recipe.ApproximateCookingTime" />
                                <Silhouette Class="blade-label m-row-3" />
                                <InputNumber Class="blade-control" @bind-Value="Recipe.ApproximateServingSize" />
                            </div>
                            <div class="flex-col flex-start flex-fill">
                                <span class="subtitle">Description</span>
                                <InputTextArea style="width:100%; height:100%;flex:1;" @bind-Value="Recipe.Description" />
                            </div>
                            break;
                        case EditorSection.Ingredients:
                            <span class="subtitle">Ingredients</span>
                            <Enplace.Library.Ingredients.IngredientList @bind-Ingredients="Recipe.Ingredients" @bind-State="State" />
                            break;
                        case EditorSection.Steps:
                            break;
                    }
                </div>
                <div class="card-footer flex-row flex-start">
                    <button class="btn-icon" type="submit" disabled="@(!isValid)">
                        @if (ActiveSection == EditorSection.General && !isValid)
                        {
                            <Next />
                        }
                        else
                        {
                            <Enplace.Library.Icons.Save />
                        }
                    </button>
                    <span class="feedback-subtle">
                        @ValidatorFeedback(isValid)
                    </span>
                    <button class="btn-icon m-revealed item-end" @onclick="() => EditorInstance.CloseAsync()">
                        <Close />
                    </button>
                </div>
                break;
        }
    </div>
</EditForm>

@code {
    [CascadingParameter] BlazoredModalInstance EditorInstance { get; set; } = default!;
    [CascadingParameter] IModalService ModalService { get; set; } = default!;

    [Inject]
    public ApiService<RecipeDTO> Service { get; set; }
    [Inject]
    public ConfigurationService ConfigurationService { get; set; }
    [Inject]
    public AsyncEventManager<RecipeDTO> AsyncEventManager { get; set; }

    public EditContext Context { get; set; } = new(new RecipeDTO());

    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string Action { get; set; } = string.Empty;

    [Parameter]
    public RecipeDTO Recipe { get; set; } = new();
    [Parameter]
    public EventCallback<RecipeDTO?> RecipeChanged { get; set; }

    [Parameter]
    public ComponentState State { get; set; }
    [Parameter]
    public EventCallback<ComponentState> StateChanged { get; set; }

    public enum EditorSection
    {
        General,
        Ingredients,
        Steps
    }

    public EditorSection ActiveSection { get; set; } = EditorSection.General;

    private ImageDTO _recipeHeaderImg;
    private int _recipeCategoryId;

    protected override async Task OnInitializedAsync()
    {
        EventManager.IngredientRequested.OnEventTriggered += RequestNewIngredient;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (EnplaceContext.RecipeCategories.Count == 0 || EnplaceContext.IngredientCategories.Count == 0)
        {
            await ConfigurationService.GetBaseResources();
        }

        if (Action == "edit" || Action == "details")
        {
            Recipe = await Service.Get(Id);
            if (Recipe is null)
            {
                State = ComponentState.Error;
            }
            else
            {
                Context = new(Recipe);
                _recipeHeaderImg = Recipe.RecipeImages.FirstOrDefault(img => img.Size == ImageSize.Header) ?? new();
                State = Enum.Parse<ComponentState>(Action, true);
            }
        }
        else if (Action == "create")
        {
            _recipeHeaderImg = new();
        }
    }

    public async Task PostRecipe(EditContext context)
    {
        RecipeDTO? result = null;
        UserConverter userConverter = new();
        Recipe.Owner = EnplaceContext.User;
        Console.WriteLine("Submit triggered...");
        switch (State)
        {
            case ComponentState.Edit:
                result = await Service.Update(Recipe);
                break;
            case ComponentState.Create:
                if (Recipe.RecipeImages.Any(i => i.Size == ImageSize.Header))
                {
                    Recipe.RecipeImages.Remove(Recipe.RecipeImages.First(i => i.Size == ImageSize.Header));
                    Recipe.RecipeImages.Add(_recipeHeaderImg);
                }
                else
                {
                    Recipe.RecipeImages.Add(_recipeHeaderImg);
                }
                result = await Service.Add(Recipe);
                EventManager.TriggerOnSubmit();
                AsyncEventManager.TriggerEvent(Recipe);
                break;
            default:
                break;
        }
        if (result is null)
        {
            Console.WriteLine("...no exception returned from the server.");
            await EditorInstance.CloseAsync();
        }
        else
        {
        }
    }

    private async Task RequestNewIngredient()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var id = state.User.Identity as ClaimsIdentity;
        var scopes = id?.FindAll("scope") ?? [];
        List<string> allowedScopes = ["owner", "admin", "community-champion"];

        if (scopes.Any(c => allowedScopes.Contains(c.Value)))
        {
            var opts = new ModalOptions() { Size = ModalSize.Small };
            var modalParams = new ModalParameters();
            ModalService.Show<IngredientCreator>("Request new Ingredient", modalParams, opts);
        }
        else
        {
            // standard user scope
        }

    }

    private async Task AssignCategory(int categoryId)
    {
        _recipeCategoryId = categoryId;
        Recipe.Category = EnplaceContext.RecipeCategories.First(cat => cat.Id == categoryId);
    }

    private bool IsRecipeValid()
    {
        if (Recipe is null) return false;
        if (Recipe.Ingredients.Count == 0) return false;
        if (string.IsNullOrEmpty(Recipe.Name) || Recipe.Category is null) return false;
        return true;
    }
    private string ValidatorFeedback(bool allowPost)
    {
        if (!allowPost)
        {
            return ActiveSection switch
            {
                EditorSection.General => (string.IsNullOrEmpty(Recipe.Name) || Recipe.Category is null) ? "The basics first" : "Next up, ingredients",
                EditorSection.Ingredients => Recipe?.Ingredients.Count == 0 ? "Now, ingredients" : string.Empty,
                _ => string.Empty
            };
        }
        else
        {
            if (Recipe.RecipeSteps.Count == 0)
            {
                return "You can add the recipe steps later!";
            }
            else
            {
                return "All done!";
            }
        }
    }

}
