@page "/recipes/{Id:int}/{Action}"
@page "/recipes/{Action}"
@using Blazored.Modal
@using Enplace.Service.Services.Converters
@using Enplace.Service.Services.Managers

@switch (State)
{
    case ComponentState.Loading:
        // TODO : Add Skeleton version of the component
        <div class="recipe-editor-loading">
            ... loading ...
        </div>
        break;
    case ComponentState.Create:
        <EditForm EditContext="@Context" OnSubmit="PostRecipe">
            <div class="recipe-editor-edit card">
                <ImageDropper @bind-Image="@_recipeHeaderImg" />
                <div class="card-header">
                </div>
                <div class="card-body">
                    <TabList @bind-OptionSet="ActiveSection" Delimiter="OptionSetDelimiter.CapitalLetters" />
                    @switch (ActiveSection)
                    {
                        case EditorSection.General:
                            <div class="input-blade">
                                <span class="subtitle">Title</span>
                                <span class="subtitle">Category</span>
                            </div>
                            <div class="input-blade">
                                <InputText @bind-Value="Recipe.Name" placeholder="Recipe Name..." />
                                <TGLSelect Field="@_recipeCategoryId" FieldChanged="(i) => AssignCategory(i)" Options="EnplaceContext.RecipeCategories.ToList<ILabeled>()" />
                            </div>
                            <div class="flex-col flex-start">
                                <span class="subtitle">Description</span>
                                <InputTextArea style="width:100%;" @bind-Value="Recipe.Description" />
                            </div>
                            break;
                        case EditorSection.Ingredients:
                            <div class="flex-col flex-start">
                                <span class="subtitle">Ingredients</span>
                                <Enplace.Library.Ingredients.IngredientList @bind-Ingredients="Recipe.Ingredients" @bind-State="State" />
                            </div>
                            break;
                        case EditorSection.Steps:
                            break;
                    }
                </div>
                <div class="card-footer flex-row flex-start">
                    <button class="btn-icon" type="submit">
                        <Enplace.Library.Icons.Save />
                    </button>
                </div>
            </div>
        </EditForm>
        break;
    // case ComponentState.Edit:
    default:
        <EditForm EditContext="@Context" OnSubmit="PostRecipe">
            <div class="recipe-editor-edit card">
                <div class="card-header">
                    @State
                </div>
                <div class="card-body">
                    <Enplace.Library.Ingredients.IngredientList @bind-Ingredients="Recipe.Ingredients" @bind-State="State" />
                </div>
                <div class="card-footer">
                    <button class="btn-icon" type="submit">
                        <Enplace.Library.Icons.Save />
                    </button>
                </div>
            </div>
        </EditForm>
        break;
}


@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    private async Task Close() => await BlazoredModal.CloseAsync();
    [Inject]
    public ApiService<RecipeDTO> Service { get; set; }
    [Inject]
    public ConfigurationService ConfigurationService { get; set; }
    [Inject]
    public AsyncEventManager<RecipeDTO> AsyncEventManager { get; set; }

    public EditContext Context { get; set; } = new(new RecipeDTO());

    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string Action { get; set; } = string.Empty;

    [Parameter]
    public RecipeDTO? Recipe { get; set; } = new();
    [Parameter]
    public EventCallback<RecipeDTO?> RecipeChanged { get; set; }

    [Parameter]
    public ComponentState State { get; set; }
    [Parameter]
    public EventCallback<ComponentState> StateChanged { get; set; }

    public enum EditorSection
    {
        General,
        Ingredients,
        Steps
    }

    public EditorSection ActiveSection { get; set; } = EditorSection.General;

    private ImageDTO _recipeHeaderImg;
    private int _recipeCategoryId;
    private async Task AssignCategory(int categoryId)
    {
        _recipeCategoryId = categoryId;
        Recipe.Category = EnplaceContext.RecipeCategories.First(cat => cat.Id == categoryId);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (EnplaceContext.RecipeCategories.Count == 0 || EnplaceContext.IngredientCategories.Count == 0)
        {
            await ConfigurationService.GetBaseResources();
        }

        if (Action == "edit" || Action == "details")
        {
            Recipe = await Service.Get(Id);
            if (Recipe is null)
            {
                State = ComponentState.Error;
            }
            else
            {
                Context = new(Recipe);
                _recipeHeaderImg = Recipe.RecipeImages.FirstOrDefault(img => img.Size == ImageSize.Header) ?? new();
                State = Enum.Parse<ComponentState>(Action, true);
            }
        }
        else if (Action == "create")
        {
            _recipeHeaderImg = new();
        }
    }

    public async Task PostRecipe(EditContext context)
    {
        Exception? result = null;
        UserConverter userConverter = new();
        Recipe.Owner = EnplaceContext.User;
        Console.WriteLine("Submit triggered...");
        switch (State)
        {
            case ComponentState.Edit:
                result = await Service.Update(Recipe);
                break;
            case ComponentState.Create:
                if (Recipe.RecipeImages.Any(i => i.Size == ImageSize.Header))
                {
                    Recipe.RecipeImages.Remove(Recipe.RecipeImages.First(i => i.Size == ImageSize.Header));
                    Recipe.RecipeImages.Add(_recipeHeaderImg);
                }
                else
                {
                    Recipe.RecipeImages.Add(_recipeHeaderImg);
                }
                result = await Service.Add(Recipe);
                EventManager.TriggerOnSubmit();
                AsyncEventManager.TriggerEvent(Recipe);
                break;
            default:
                break;
        }
        if (result is null)
        {
            Console.WriteLine("...no exception returned from the server.");
            Close();
        }
        else
        {
            Console.WriteLine(result.Message);
        }
    }
}
