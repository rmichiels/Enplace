@page "/recipes/{Id:int}/{Action}"
@page "/recipes/{Action}"
@using Blazored.Modal
@using Blazored.Modal.Services
@using Enplace.Library.Ingredients
@using Enplace.Library.Menus
@using Enplace.Service.Services.Converters
@using Enplace.Service.Services.Managers
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (Recipe is not null && Context is not null)
{
    <EditForm class="flex-col flex-start gap-m flex-grow-1 mobile-invert-col" EditContext="@Context" OnSubmit="PostRecipe">
        <TabList @bind-OptionSet="ActiveSection" Delimiter="OptionSetDelimiter.CapitalLetters" />
        <div class="card recipe-editor @State">
            @switch (State)
            {
                case ComponentState.Loading:
                    // TODO : Add Skeleton version of the component
                    <p>... loading ...</p>
                    break;
                case ComponentState.Details:
                case ComponentState.Create:
                case ComponentState.Edit:
                    bool isValid = IsRecipeValid();
                    @if (ActiveSection == EditorSection.General)
                    {
                        <div class="card-header" hidden>
                            <ImageDropper @bind-Image="@_recipeHeaderImg" />
                        </div>
                    }
                    <div class="card-body flex-col flex-1">
                        @switch (ActiveSection)
                        {
                            case EditorSection.General:
                                <div class="input-blade">
                                    <span class="subtitle blade-label" style="width:min-content;">Title</span>
                                    <InputText class=@($"blade-control {State}") @bind-Value="Recipe.Name" placeholder="Recipe Name..." disabled=@(State != ComponentState.Edit && State !=ComponentState.Create ) />
                                    <span class="subtitle blade-label">Category</span>
                                    <TGLSelect Class="blade-control" Field="@_recipeCategoryId" Placeholder="@(Recipe.Category?.Name ?? string.Empty)" FieldChanged="(i) => AssignCategory(i)" Options="EnplaceContext.RecipeCategories.ToList<ILabeled>()" State="State" />
                                    <Clock Class="blade-label m-row-3 dark-mode" />
                                    <InputNumber class=@($"blade-control text-center {State}") @bind-Value="Recipe.ApproximateCookingTime" disabled=@(State != ComponentState.Edit && State !=ComponentState.Create ) />
                                    <Silhouette Class="blade-label m-row-3 dark-mode" />
                                    <InputNumber class=@($"blade-control text-center {State} ") @bind-Value="Recipe.ApproximateServingSize" disabled=@(State != ComponentState.Edit && State !=ComponentState.Create ) />
                                </div>
                                <div class="flex-col flex-start flex-fill">
                                    <span class="subtitle">Description</span>
                                    <InputTextArea style="width:100%; height:100%;flex:1;padding:var(--padding-s)" class=@State @bind-Value="Recipe.Description" disabled=@(State != ComponentState.Edit && State !=ComponentState.Create ) />
                                </div>
                                break;
                            case EditorSection.Ingredients:
                                <header class="d-flex flex-row gap-s">
                                    <h4>Ingredients</h4>
                                    @if (State != ComponentState.Edit && State != ComponentState.Create)
                                    {
                                        <Ladder @bind-Step=@Step LowerBounds="1" />
                                    }
                                </header>
                                <Enplace.Library.Ingredients.IngredientList @bind-Ingredients="Recipe.Ingredients" @bind-State="State" Scale=@Scale />
                                break;
                            case EditorSection.Steps:
                                break;
                        }
                    </div>

                    <div class="card-footer flex-row flex-start">
                        @if (State != ComponentState.Details)
                        {
                            @if (ActiveSection == EditorSection.General && !isValid)
                            {
                                <button class="btn-icon" type="submit" @onclick=@(() => ActiveSection = EditorSection.Ingredients)>
                                    <Next />
                                </button>
                            }
                            else
                            {
                                <button class="btn-icon" type="submit" disabled="@(!isValid)">
                                    <Enplace.Library.Icons.Save />
                                </button>
                            }
                            @if (State != ComponentState.Details)
                            {
                                <span class="feedback-subtle">
                                    @ValidatorFeedback(isValid)
                                </span>
                            }
                            <button class="btn-icon m-revealed item-end" @onclick="() => EditorInstance.CloseAsync()">
                                <Close />
                            </button>
                        }
                        else
                        {
                            @if (EnplaceContext.User.Id != Recipe?.Owner?.Id)
                            {
                                <button class="btn-icon" type="button" @onclick="() => Like()">
                                    <Enplace.Library.Icons.Heart />
                                </button>
                            }
                            <button class="btn-icon" @onclick="() => ShowMenuSelector()">
                                <Enplace.Library.Icons.AddRecipe />
                            </button>
                        }
                    </div>
                    break;
            }
        </div>
    </EditForm>
}

@code {
    [CascadingParameter] BlazoredModalInstance EditorInstance { get; set; } = default!;
    [CascadingParameter] IModalService ModalService { get; set; } = default!;

    [Inject]
    public ApiService<RecipeDTO> Service { get; set; }
    [Inject]
    public ConfigurationService ConfigurationService { get; set; }
    [Inject]
    public AsyncEventManager<RecipeDTO> ItemEvents { get; set; }

    public EditContext Context { get; set; }

    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string Action { get; set; } = string.Empty;

    [Parameter]
    public RecipeDTO? Recipe { get; set; } = null;
    [Parameter]
    public EventCallback<RecipeDTO?> RecipeChanged { get; set; }

    [Parameter]
    public ComponentState State { get; set; }
    [Parameter]
    public EventCallback<ComponentState> StateChanged { get; set; }

    [Parameter]
    public decimal Step
    {
        get => _step;
        set
        {
            _step = value;
            StateHasChanged();
        }
    }
    private decimal _step = 0;

    public decimal Scale
    {
        get
        {
            if (State == ComponentState.Create)
            {
                return 1;
            }
            else
            {
                return Step / Recipe.ApproximateServingSize ?? 1;
            }
        }
    }

    public enum EditorSection
    {
        General,
        Ingredients,
        Steps
    }

    public EditorSection ActiveSection { get; set; }

    private ImageDTO _recipeHeaderImg;
    private int _recipeCategoryId;

    protected override async Task OnInitializedAsync()
    {
        EventManager.IngredientRequested.OnEventTriggered += RequestNewIngredient;
        await Init();
        //await base.OnInitializedAsync();
    }
    /*
    protected override async Task OnParametersSetAsync()
    {

        await base.OnParametersSetAsync();
    }*/

    public async Task Init()
    {
        ActiveSection = EditorSection.General;
        if (Action == "edit" || Action == "details")
        {
            if (Recipe is null)
            {
                Recipe = await Service.Get(Id);
            }

            if (Recipe is null)
            {
                State = ComponentState.Error;
            }
            else
            {
                if (Step == 0)
                {
                    Step = (Recipe.ApproximateServingSize > 0) ? Recipe.ApproximateServingSize.Value : 1;
                }
                Context = new(Recipe);
                _recipeHeaderImg = Recipe.RecipeImages.FirstOrDefault(img => img.Size == ImageSize.Header) ?? new();
                State = Enum.Parse<ComponentState>(Action, true);
            }
        }
        if (State == ComponentState.Create)
        {
            Recipe = new();
            Context = new(Recipe);
            _recipeHeaderImg = new();
            Step = 1;
        }
        if (EnplaceContext.RecipeCategories.Count == 0 || EnplaceContext.IngredientCategories.Count == 0)
        {
            await ConfigurationService.GetBaseResources();
        }
    }

    public async Task PostRecipe(EditContext context)
    {
        RecipeDTO? result = null;
        UserConverter userConverter = new();
        Recipe.Owner = EnplaceContext.User;
        Console.WriteLine("Submit triggered...");
        switch (State)
        {
            case ComponentState.Edit:
                await Service.Update(Recipe);
                EventManager.TriggerOnSubmit();
                ItemEvents.TriggerEvent(Recipe);
                break;
            case ComponentState.Create:
                if (Recipe.RecipeImages.Any(i => i.Size == ImageSize.Header))
                {
                    Recipe.RecipeImages.Remove(Recipe.RecipeImages.First(i => i.Size == ImageSize.Header));
                    Recipe.RecipeImages.Add(_recipeHeaderImg);
                }
                else
                {
                    Recipe.RecipeImages.Add(_recipeHeaderImg);
                }
                result = await Service.Add(Recipe);
                EventManager.TriggerOnSubmit();
                ItemEvents.TriggerEvent(Recipe);
                break;
            default:
                break;
        }
        if (result is null)
        {
            Console.WriteLine("...no exception returned from the server.");
            await EditorInstance.CloseAsync();
        }
        else
        {
        }
    }

    private async Task RequestNewIngredient()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var id = state.User.Identity as ClaimsIdentity;
        var scopes = id?.FindAll("scope") ?? [];
        List<string> allowedScopes = ["owner", "admin", "community-champion"];

        if (scopes.Any(c => allowedScopes.Contains(c.Value)))
        {
            var opts = new ModalOptions() { Size = ModalSize.Small };
            var modalParams = new ModalParameters();
            ModalService.Show<IngredientCreator>("Request new Ingredient", modalParams, opts);
        }
        else
        {
            // standard user scope
        }

    }

    private async Task AssignCategory(int categoryId)
    {
        _recipeCategoryId = categoryId;
        Recipe.Category = EnplaceContext.RecipeCategories.First(cat => cat.Id == categoryId);
    }

    private bool IsRecipeValid()
    {
        if (Recipe is null) return false;
        if (Recipe.Ingredients.Count == 0) return false;
        if (string.IsNullOrEmpty(Recipe.Name) || Recipe.Category is null) return false;
        return true;
    }
    private string ValidatorFeedback(bool allowPost)
    {
        if (!allowPost)
        {
            return ActiveSection switch
            {
                EditorSection.General => (string.IsNullOrEmpty(Recipe.Name) || Recipe.Category is null) ? "The basics first" : "Next up, ingredients",
                EditorSection.Ingredients => Recipe?.Ingredients.Count == 0 ? "Now, ingredients" : string.Empty,
                _ => string.Empty
            };
        }
        else
        {
            if (Recipe.RecipeSteps.Count == 0)
            {
                return "You can add the recipe steps later!";
            }
            else
            {
                return "All done!";
            }
        }
    }

    public async Task Like()
    {
        await Service.Like(Recipe);
        ItemEvents.TriggerEvent(Recipe);
    }

    public void ShowMenuSelector()
    {
        var modalParams = new ModalParameters()
            .Add(nameof(MenuSelector.Recipe), Recipe);
        var options = new ModalOptions()
            {
                Size = ModalSize.Small,
            };
        ModalService.Show<MenuSelector>("Select menu", modalParams, options);
    }
}
