@using Blazored.Modal
@using Blazored.Modal.Services
@using System.Security.Claims
@using Enplace.Service.Services.Managers
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="recipe-selector" @onclick="@(() => {ShowOptions = false; StateHasChanged();})">
    <div class="input-blade" @onclick="@(() => {ShowOptions = false; StateHasChanged();})">
        <InputText class="blade-control m-row-main m-row-full-width" style="width:100%; height:100%;  border-radius: 10px;padding-left:var(--padding-m)" @bind-Value="_searchRecipe"
                   @oninput="(c) => QueryRecipes((string)c.Value)" @onchange="(c) => QueryRecipes((string)c.Value)" placeholder="Search..." />
    </div>
    @if (ShowOptions)
    {
        <div @ref="optionsRef" class="recipe-options">
            @if (_options.Count == 0)
            {
                <p>
                    no ingredients found
                </p>
            }
            else
            {
                foreach (var set in _options)
                {
                    <span class="subtitle">@set.Key</span>
                    foreach (var opt in set.Value)
                    {
                        <button class="@opt.Category.Name" @onclick="() => SelectRecipe(opt)">
                            <h5>@opt.Name</h5> <span>@opt.Category.Name</span>
                        </button>
                    }
                }
               
            }
         @*    <p>
                Not what you're looking for? <a class="interact-subtle" @onclick="(e) => EventManager.IngredientRequested.TriggerEvent()" onclick:preventDefault>Request a new ingredient!</a>
            </p> *@
        </div>
    }
</div>


@code {
    [CascadingParameter] IModalService ModalService { get; set; } = default!;
    [Inject]
    public IResourceProvider<RecipeDTO> Resource { get; set; }
    [Inject]
    public NavigationManager Navigation { get; set; }

    private IngredientDTO _recipe = new();

    private string _searchRecipe { get; set; } = string.Empty;
    private Dictionary<string, List<RecipeDTO>> _options { get; set; } = [];

    public bool ShowOptions { get; set; } = false;
    ElementReference optionsRef = new();

    protected override async void OnAfterRender(bool firstRender)
    {
        //if (ShowOptions) { await optionsRef.FocusAsync(); }
    }

    private async Task QueryRecipes(string str)
    {
        if (str.Length > 2)
        {
            _searchRecipe = str;
            var response = await Resource.Query(("name", str));
            if (response.Data?.Count > 0)
            {
                _options["recipes from users you might like"] = response.Data;
            }


            var likedResponse = await Resource.Query(("name", str),("foruser", "true"), ("isliked", "true"));
            if (likedResponse.Data?.Count > 0)
            {
                _options["recipes you've liked"] = likedResponse.Data;
            }

            var ownedResponse = await Resource.Query(("name", str),("foruser", "true"));
            if (ownedResponse.Data?.Count > 0)
            {
                _options["your recipes"] = ownedResponse.Data;
            }
        }
        ShowOptions = _searchRecipe.Length > 2 && _searchRecipe != _recipe.Name;
        StateHasChanged();
    }

    private async Task SelectRecipe(RecipeDTO recipe)
    {
        var modalOpts = new ModalOptions() { Size = ModalSize.Large };
        var modalParams = new ModalParameters()
            .Add(nameof(RecipeEditor.Id), recipe.Id)
            .Add(nameof(RecipeEditor.State), ComponentState.Details)
            .Add(nameof(RecipeEditor.Action), "details");
        ModalService.Show<RecipeEditor>(recipe.Name, modalParams, modalOpts);
    }
}
