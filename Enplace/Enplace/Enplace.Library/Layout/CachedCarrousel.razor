@using Blazored.LocalStorage
@using Enplace.Library.Models
@using Enplace.Service.Services.Managers
@typeparam TItem where TItem : class, ILabeled, new()
@typeparam TComponent where TComponent : BaseTile<TItem>

<section class="generic-carrousel @Class">
    @if (ShowCreationTile)
    {
        <DynamicComponent Type="typeof(TComponent)" Parameters="@(new Dictionary<string, object>(){{"State", ComponentState.Create},  {"Class",   "m-hidden"}})" />
    }
    @foreach (TItem item in Items ?? [])
    {
        <DynamicComponent Type="typeof(TComponent)"
                          Parameters="@(new Dictionary<string, object>()
                            {
                                {"State", ComponentState.Details},
                                {"Item", Items[Items.IndexOf(item)]},
                                {"OnItemSelected",EventCallback.Factory.Create<TItem>(this, val => OnItemSelected(val))},
                                {"Class",   SelectedItem?.Id == item?.Id ? "ActiveMenu" : string.Empty}
                            }
                )" />
    }
</section>

@code {
    [Inject]
    public required ApiService<TItem> API { get; set; }
    [Inject]
    public required AsyncEventManager<TItem> EventManager { get; set; }
    [Inject]
    public required ILocalStorageService StorageService { get; set; }

    [Parameter]
    public TItem? SelectedItem { get; set; }
    [Parameter]
    public EventCallback<TItem> SelectedItemChanged { get; set; }

    private ILabeled? _lastEvent { get; set; }

    [Parameter]
    public bool FilterOnUser { get; set; } = false;
    [Parameter]
    public string Class { get; set; } = string.Empty;
    [Parameter]
    public bool SelectFirst { get; set; } = false;
    [Parameter]
    public bool ShowCreationTile { get; set; } = true;
    [Parameter]
    public bool QueryOverride { get; set; } = false;

    [Parameter]
    public Func<ILabeled, Task<List<TItem>>>? Query { get; set; }

    [Parameter]
    public string? StorageKeyExtension { get; set; }

    [Parameter]
    public List<TItem>? Items { get; set; }
    [Parameter]
    public EventCallback<List<TItem>>? ItemsChanged { get; set; }

    private DateTime _timeStamp = DateTime.Now;
    public static readonly double MinutesToCacheInvalidation = 10;

    protected override async Task OnInitializedAsync()
    {
        Items = await StorageService.GetCachedListFor<TItem>(EnplaceContext.User?.Id ?? 0, StorageKeyExtension);

        var freshStamp = DateTime.Now;
        // if intermediate stamp exceeds cached stamp by n time
        // or there are 0 cached items
        // refresh collection
        if (freshStamp > _timeStamp.AddMinutes(MinutesToCacheInvalidation) || Items?.Count == 0 || Items is null)
        {
            (string, string)[] parameters = [];
            if (FilterOnUser)
            {
                parameters = [("foruser", "true")];
            }
            if (QueryOverride)
            {
                if (Items is null && Query is null)
                {
                    throw new Exception("Query overridden, but no alternative source has been provided.");
                }
                Items = await Query.Invoke(SelectedItem);
            }
            else
            {
                Items = await API.GetAll(parameters);
            }
            _timeStamp = freshStamp;
        }
        await StorageService.SetCacheFor<TItem>(Items, EnplaceContext.User?.Id ?? 0, StorageKeyExtension);
        EventManager.OnEventTriggered += ForceCarrouselRefresh;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (Items is not null && Items.Count > 0)
        {
            if (SelectFirst && SelectedItem is null)
            {
                SelectedItem = Items.First();
                SelectedItemChanged.InvokeAsync(Items.First());
                StateHasChanged();
            }
        }
    }

    public async Task ForceCarrouselRefresh(ILabeled? item)
    {
        Console.WriteLine($"Forcing {typeof(TItem).Name} Carrousel Refresh...");
        if (QueryOverride && Query is not null && item is not null)
        {
            Items = await Query.Invoke(item);
            StateHasChanged();
        }
        else if (item != _lastEvent || item is null)
        {
            (string, string)[] parameters = [];
            if (FilterOnUser)
            {
                parameters = [("foruser", "true")];
            }
            if (!QueryOverride)
            {
                Items = await API.GetAll(parameters);
            }
            _lastEvent = item;
        }
        StateHasChanged();
        if (Items?.Count > 0)
        {
            Task.Run(() => StorageService.SetCacheFor<TItem>(Items, item?.Id ?? 0, StorageKeyExtension));
        }
    }

    private async Task OnItemSelected(TItem? item)
    {
        if (item is not null && SelectedItem is not null)
        {
            if (item.Id != SelectedItem.Id)
            {
                await SelectedItemChanged.InvokeAsync(item);
                StateHasChanged();
            }
        }
        else if (item is not null && SelectedItem is null)
        {
            await SelectedItemChanged.InvokeAsync(item);
            StateHasChanged();
        }
    }
}
